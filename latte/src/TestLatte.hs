-- File generated by the BNF Converter (bnfc 2.9.3).

-- | Program to test parser.

module Main where

import Prelude
  ( ($), (.)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , IO, (>>), (>>=), mapM_, putStrLn
  , FilePath
  , getContents, readFile
  )
import System.Environment ( getArgs )
import System.Exit        ( exitFailure, exitSuccess )
import Control.Monad      ( when )

import AbsLatte
import LexLatte   ( Token, mkPosToken )
import ParLatte   ( pProgram, myLexer )
import PrintLatte ( Print, printTree )
import System.IO (stderr, hPutStr, hPutStrLn)
import QuadGen (genQuadCode)
import SkelLatte  ()
import TypeChecker


type Err        = Either String
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> FilePath -> IO ()
runFile v f = readFile f >>= run v f

run :: Verbosity -> FilePath -> String -> IO ()
run v fp s =
  case pProgram ts of
    Left err -> do
      hPutStr stderr "ERROR\n"
      hPutStrLn stderr err
      exitFailure
    Right tree -> do
      res <- typeCheck tree
      case res of
          Left error -> do
            hPutStr stderr "ERROR\n"
            hPutStrLn stderr error
            exitFailure
          Right _ -> do
            res <- genQuadCode fp tree
            hPutStr stderr "OK\n"
      --doSomething tree

  where
  ts = myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
  putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
  putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

failNoContent = do
   putStrLn "Compiler requires files"
   exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    []         -> failNoContent
    "-s":fs    -> mapM_ (runFile 0) fs
    fs         -> mapM_ (runFile 2) fs